{"ast":null,"code":"var _jsxFileName = \"/Users/macone/Development/zizuRoni/projectApp/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Main from './components/main.js';\nimport NavBar from './components/navigation.js';\nimport Login from './components/login.js';\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.statusChangeCallback = response => {\n      console.log('statusChangeCallback');\n      console.log(response); // The response object is returned with a status field that lets the\n      // app know the current login status of the person.\n      // Full docs on the response object can be found in the documentation\n      // for FB.getLoginStatus().\n\n      if (response.status === 'connected') {\n        // Logged into your app and Facebook.\n        this.testAPI();\n      } else if (response.status === 'not_authorized') {\n        // The person is logged into Facebook, but not your app.\n        document.getElementById('status').innerHTML = 'Please log ' + 'into this app.';\n      } else {\n        // The person is not logged into Facebook, so we're not sure if\n        // they are logged into this app or not.\n        document.getElementById('status').innerHTML = 'Please log ' + 'into Facebook.';\n      }\n    };\n\n    this.handleModalShow = () => {\n      this.setState({\n        modalShow: true\n      });\n      console.log(\"modal\");\n    };\n\n    this.state = {\n      modalShow: false\n    };\n  }\n\n  componentDidMount() {\n    window.fbAsyncInit = function () {\n      window.FB.init({\n        appId: '2854741097907041',\n        cookie: true,\n        // enable cookies to allow the server to access\n        // the session\n        xfbml: true,\n        // parse social plugins on this page\n        version: 'v2.1' // use version 2.1\n\n      }); // Now that we've initialized the JavaScript SDK, we call\n      // FB.getLoginStatus().  This function gets the state of the\n      // person visiting this page and can return one of three states to\n      // the callback you provide.  They can be:\n      //\n      // 1. Logged into your app ('connected')\n      // 2. Logged into Facebook, but not your app ('not_authorized')\n      // 3. Not logged into Facebook and can't tell if they are logged into\n      //    your app or not.\n      //\n      // These three cases are handled in the callback function.\n\n      window.FB.getLoginStatus(function (response) {\n        this.statusChangeCallback(response);\n      }.bind(this));\n    }.bind(this); // Load the SDK asynchronously\n\n\n    (function (d, s, id) {\n      var js,\n          fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) return;\n      js = d.createElement(s);\n      js.id = id;\n      js.src = \"//connect.facebook.net/en_US/sdk.js\";\n      fjs.parentNode.insertBefore(js, fjs);\n    })(document, 'script', 'facebook-jssdk');\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      handleModalShow: this.handleModalShow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Main, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Login, {\n      show: this.state.modalShow,\n      onHide: () => this.setState({\n        modalShow: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/macone/Development/zizuRoni/projectApp/src/App.js"],"names":["React","Main","NavBar","Login","App","Component","constructor","props","statusChangeCallback","response","console","log","status","testAPI","document","getElementById","innerHTML","handleModalShow","setState","modalShow","state","componentDidMount","window","fbAsyncInit","FB","init","appId","cookie","xfbml","version","getLoginStatus","bind","d","s","id","js","fjs","getElementsByTagName","createElement","src","parentNode","insertBefore","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Main from './components/main.js'\nimport NavBar from './components/navigation.js'\nimport Login from './components/login.js'\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalShow: false\n    };\n  }\n  componentDidMount(){\n    window.fbAsyncInit = function() {\n      window.FB.init({\n        appId      : '2854741097907041',\n        cookie     : true,  // enable cookies to allow the server to access\n                          // the session\n        xfbml      : true,  // parse social plugins on this page\n        version    : 'v2.1' // use version 2.1\n      });\n  \n      // Now that we've initialized the JavaScript SDK, we call\n      // FB.getLoginStatus().  This function gets the state of the\n      // person visiting this page and can return one of three states to\n      // the callback you provide.  They can be:\n      //\n      // 1. Logged into your app ('connected')\n      // 2. Logged into Facebook, but not your app ('not_authorized')\n      // 3. Not logged into Facebook and can't tell if they are logged into\n      //    your app or not.\n      //\n      // These three cases are handled in the callback function.\n      window.FB.getLoginStatus(function(response) {\n        this.statusChangeCallback(response);\n      }.bind(this));\n    }.bind(this);\n  \n    // Load the SDK asynchronously\n    (function(d, s, id) {\n      var js, fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) return;\n      js = d.createElement(s); js.id = id;\n      js.src = \"//connect.facebook.net/en_US/sdk.js\";\n      fjs.parentNode.insertBefore(js, fjs);\n    }(document, 'script', 'facebook-jssdk'));\n  }\n\n  statusChangeCallback=(response)=> {\n    console.log('statusChangeCallback');\n    console.log(response);\n    // The response object is returned with a status field that lets the\n    // app know the current login status of the person.\n    // Full docs on the response object can be found in the documentation\n    // for FB.getLoginStatus().\n    if (response.status === 'connected') {\n      // Logged into your app and Facebook.\n      this.testAPI();\n    } else if (response.status === 'not_authorized') {\n      // The person is logged into Facebook, but not your app.\n      document.getElementById('status').innerHTML = 'Please log ' +\n        'into this app.';\n    } else {\n      // The person is not logged into Facebook, so we're not sure if\n      // they are logged into this app or not.\n      document.getElementById('status').innerHTML = 'Please log ' +\n      'into Facebook.';\n    }\n  }\n\n  handleModalShow=()=>{\n    this.setState({ modalShow: true})\n    console.log(\"modal\")\n  }\n\n  render(){\n   \n    return (\n    <div >\n      <NavBar \n        handleModalShow={this.handleModalShow}\n      />\n      <Main/>\n      <Login\n        show={this.state.modalShow}\n        onHide={() => this.setState({ modalShow: false})}\n      />\n    </div>\n  );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}